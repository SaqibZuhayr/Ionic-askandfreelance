{"version":3,"sources":["webpack:///./src/app/add-gigs/add-gigs.module.ts","webpack:///./src/app/add-gigs/add-gigs.page.html","webpack:///./src/app/add-gigs/add-gigs.page.scss","webpack:///./src/app/add-gigs/add-gigs.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAuC;AACM;AACF;AACQ;AACE;AAEV;AAEC;AAE5C,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,0DAAW;KACzB;CACJ,CAAC;AAYF;IAAA;IACA,CAAC;IADY,iBAAiB;QAV7B,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,0DAAW;gBACX,kEAAmB;gBACnB,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAChC;YACD,YAAY,EAAE,CAAC,0DAAW,CAAC;SAC9B,CAAC;OACW,iBAAiB,CAC7B;IAAD,wBAAC;CAAA;AAD6B;;;;;;;;;;;;AC3B9B,u7C;;;;;;;;;;;ACAA,+DAA+D,2I;;;;;;;;;;;;;;;;;;;;ACAf;AACA;AACkB;AAC3B;AAOvC;IAKI,qBAAoB,IAAgB,EAAU,MAAc,EAAS,WAAwB;QAAzE,SAAI,GAAJ,IAAI,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAa;QAF7F,YAAO,GAAG,QAAQ,CAAC;IAGnB,CAAC;IAED,8BAAQ,GAAR;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAClC,SAAS,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACpC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAEtC,CAAC,CAAC;IACP,CAAC;IAED,6BAAO,GAAP;QAAA,iBAkBC;QAjBG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACjC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACxB,OAAO;SACV;QACD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE;YAC3C,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;YACzB,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC;YACxC,UAAU,EAAE,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC;YAC5C,OAAO,EAAE,IAAI,CAAC,YAAY;SAE7B,CAAC;aACG,SAAS,CAAC,UAAC,IAAI;YACZ,qBAAqB;YACrB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,8CAA8C,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IAEX,CAAC;IAED,mCAAa,GAAb,UAAc,KAAY;QAA1B,iBAYC;QAXG,IAAM,IAAI,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;QACvC,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG;YACZ,aAAa;YACb,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;QACtC,CAAC,CAAC;QACF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;QACzB,kCAAkC;IAEtC,CAAC;IAjDQ,WAAW;QALvB,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,kGAAmC;;SAEtC,CAAC;+EAM4B,+DAAU,EAAkB,sDAAM,EAAsB,0DAAW;OALpF,WAAW,CAoEvB;IAAD,kBAAC;CAAA;AApEuB","file":"add-gigs-add-gigs-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {AddGigsPage} from './add-gigs.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddGigsPage\n    }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        IonicModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [AddGigsPage]\n})\nexport class AddGigsPageModule {\n}\n","module.exports = \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-menu-button></ion-menu-button>\\n            <ion-back-button defaulthref=\\\"\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>Add Gig</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"gigForm()\\\">\\n        <ion-item>\\n            <ion-input formControlName=\\\"gig_title\\\" type=\\\"text\\\" placeholder=\\\"Title\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-input formControlName=\\\"gig_description\\\" type=\\\"text\\\" placeholder=\\\"Description\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n            <ion-input formControlName=\\\"gig_rate\\\" type=\\\"text\\\" placeholder=\\\"Gig Rate\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n\\n            <ion-button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"filepicker.click()\\\">Add Image</ion-button>\\n            <input type=\\\"file\\\" #filepicker (change)=\\\"onImagePicked($event)\\\"\\n                   accept=\\\"image/*\\\" style=\\\"visibility: hidden\\\">\\n            <!--<img  [src=]\\\"imagePreview\\\" [style.visibility]=\\\"visible\\\" >-->\\n        </ion-item>\\n        <ion-button [disabled]=\\\"!addForm.valid\\\" type=\\\"submit\\\" shape=\\\"round\\\" size=\\\"default\\\" color=\\\"primary\\\"\\n                    expand=\\\"block\\\">Post Gig\\n        </ion-button>\\n\\n    </form>\\n\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkZC1naWdzL2FkZC1naWdzLnBhZ2Uuc2NzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'app-add-gigs',\n    templateUrl: './add-gigs.page.html',\n    styleUrls: ['./add-gigs.page.scss'],\n})\nexport class AddGigsPage implements OnInit {\n    imagePreview;\n    addForm: FormGroup;\n    visible = 'hidden';\n\n    constructor(private http: HttpClient, private router: Router, public formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.addForm = this.formBuilder.group({\n            gig_title: ['', Validators.required],\n            gig_description: ['', Validators.required],\n            gig_rate: ['', Validators.required],\n\n        });\n    }\n\n    gigForm() {\n        if (!localStorage.getItem('userid')) {\n            alert('LOGIN REQUIRED');\n            return;\n        }\n        console.log('answer');\n        this.http.post('http://localhost:3000/addgig', {\n            'gig': this.addForm.value,\n            'userid': localStorage.getItem('userid'),\n            'username': localStorage.getItem('username'),\n            'image': this.imagePreview,\n\n        })\n            .subscribe((data) => {\n                // console.log(data);\n                this.router.navigateByUrl('/sidemenu-question/freelance/tabf/tab-mygigs');\n            });\n\n    }\n\n    onImagePicked(event: Event) {\n        const file = (event.target as HTMLInputElement).files[0];\n        this.addForm.patchValue({image: file});\n        const reader = new FileReader();\n        reader.onload = () => {\n            // @ts-ignore\n            this.imagePreview = reader.result;\n        };\n        reader.readAsDataURL(file);\n        this.visible = 'visible';\n        // a.style.visibility = 'visible';\n\n    }\n\n    // getImage() {\n    //     const options: CameraOptions = {\n    //         quality: 100,\n    //         destinationType: this.camera.DestinationType.DATA_URL,\n    //         encodingType: this.camera.EncodingType.JPEG,\n    //         mediaType: this.camera.MediaType.PICTURE\n    //     };\n    //\n    //     this.camera.getPicture(options).then((imageData) => {\n    //         // imageData is either a base64 encoded string or a file URI\n    //         // If it's base64 (DATA_URL):\n    //        this.imagePreview = 'data:image/jpeg;base64,' + imageData;\n    //     }, (err) => {\n    //         // Handle error\n    //     });\n    // }\n\n}\n"],"sourceRoot":""}