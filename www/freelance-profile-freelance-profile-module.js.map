{"version":3,"sources":["webpack:///./src/app/freelance-profile/freelance-profile.module.ts","webpack:///./src/app/freelance-profile/freelance-profile.page.html","webpack:///./src/app/freelance-profile/freelance-profile.page.scss","webpack:///./src/app/freelance-profile/freelance-profile.page.ts"],"names":[],"mappings":"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","file":"freelance-profile-freelance-profile-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {FreelanceProfilePage} from './freelance-profile.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FreelanceProfilePage\n    }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [FreelanceProfilePage]\n})\nexport class FreelanceProfilePageModule {\n}\n","module.exports = \"<ion-header>\\r\\n    <ion-toolbar color=\\\"primary\\\">\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-menu-button></ion-menu-button>\\r\\n            <ion-back-button defaulthref=\\\"\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>Freelance Profile</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <div *ngIf=\\\"orderRequests\\\">\\r\\n        <ion-card>\\r\\n            <ion-card-header>Order Requests</ion-card-header>\\r\\n            <ion-card-content>\\r\\n                <ion-card class=\\\"card\\\" *ngFor=\\\"let order of orderRequests\\\">\\r\\n                    <ion-card-content>\\r\\n                        <div class=\\\"card-body\\\">\\r\\n                            <div class=\\\"card-header\\\">\\r\\n                                <h6 class=\\\"card-link\\\">\\r\\n                                    Title: {{order.title}}\\r\\n                                </h6>\\r\\n                            </div>\\r\\n                            <h6>Order Price: <a>{{order.amount}}</a></h6>\\r\\n                            <hr>\\r\\n                            <h6>Order Description: </h6>\\r\\n                            <p>{{order.description}}</p>\\r\\n                            <hr>\\r\\n                            <h6>Order Delivery Time: </h6>\\r\\n                            <p>{{order.time_limit}}</p>\\r\\n                            <hr>\\r\\n\\r\\n                            <ion-button type=\\\"button\\\" color=\\\"success\\\" (click)=\\\"accept(order._id)\\\">Accept</ion-button>\\r\\n                            <ion-button type=\\\"button\\\" color=\\\"danger\\\" style=\\\"float: right\\\" (click)=\\\"discard(order._id)\\\">\\r\\n                                Discard\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n            </ion-card-content>\\r\\n        </ion-card>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"pendingOrders\\\">\\r\\n        <ion-card>\\r\\n            <ion-card-header>Pending Requests</ion-card-header>\\r\\n            <ion-card-content>\\r\\n                <ion-card class=\\\"card\\\" *ngFor=\\\"let order of pendingOrders\\\">\\r\\n                    <ion-card-content>\\r\\n                        <div class=\\\"card-body\\\">\\r\\n                            <div class=\\\"card-header\\\">\\r\\n                                <h6 class=\\\"card-link\\\">\\r\\n                                    Title: {{order.title}}\\r\\n                                </h6>\\r\\n                            </div>\\r\\n                            <h6>Order Price: <a>{{order.amount}}</a></h6>\\r\\n                            <hr>\\r\\n                            <h6>Order Description: </h6>\\r\\n                            <p>{{order.description}}</p>\\r\\n                            <hr>\\r\\n                            <h6>Order Delivery Time: </h6>\\r\\n                            <p>{{order.time_limit}}</p>\\r\\n                            <hr>\\r\\n                            <h6>Order Status: </h6>\\r\\n                            <p>{{order.completed}}</p>\\r\\n                            <hr>\\r\\n                            <ion-button type=\\\"button\\\" color=\\\"success\\\"\\r\\n                                        (click)=\\\"onComplete(order.userid,order._id,order.gig_id)\\\">Complete\\r\\n                            </ion-button>\\r\\n                            <input type=\\\"file\\\"\\r\\n                                   id=\\\"file\\\"\\r\\n                                   (change)=\\\"handleFileInput($event.target.files)\\\">\\r\\n                            <ion-button type=\\\"button\\\" class=\\\"btn btn-primary\\\" style=\\\"float: right\\\" (click)=\\\"onCancel()\\\">\\r\\n                                Cancel\\r\\n                                Order\\r\\n                            </ion-button>\\r\\n                        </div>\\r\\n\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n            </ion-card-content>\\r\\n        </ion-card>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"myorders\\\">\\r\\n        <ion-card>\\r\\n            <ion-card-header>Buyer Order</ion-card-header>\\r\\n            <ion-card-content>\\r\\n                <ion-card class=\\\"card\\\" *ngFor=\\\"let order of myorders.ordersAccepted\\\">\\r\\n                    <ion-card-content>\\r\\n                        <div class=\\\"card-body\\\">\\r\\n                            <div class=\\\"card-header\\\">\\r\\n                                <h6 class=\\\"card-link\\\">\\r\\n                                    Title: {{order.title}}\\r\\n                                </h6>\\r\\n                            </div>\\r\\n                            <h6>Order Price: <a>{{order.amount}}</a></h6>\\r\\n                            <hr>\\r\\n                            <h6>Order Description: </h6>\\r\\n                            <p>{{order.description}}</p>\\r\\n                            <hr>\\r\\n                            <h6>Order Delivery Time: </h6>\\r\\n                            <p>{{order.time_limit}}</p>\\r\\n                            <hr>\\r\\n\\r\\n                            <ion-button type=\\\"button\\\" color=\\\"success\\\" (click)=\\\"accept(order._id)\\\"\\r\\n                            >\\r\\n                                Payment\\r\\n                            </ion-button>\\r\\n                            <!--routerLink=\\\"/main/userprofile/payment/{{order.amount}}/{{order._id}}/{{order.gig_id}}\\\"-->\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n                <ion-card-header>Order Received</ion-card-header>\\r\\n                <ion-card class=\\\"card\\\" *ngFor=\\\"let order of myorders.ordersReceived\\\">\\r\\n                    <ion-card-content>\\r\\n                        <div class=\\\"card-body\\\">\\r\\n                            <div class=\\\"card-header\\\">\\r\\n                                <h6 class=\\\"card-link\\\">\\r\\n                                    Title: {{order.orderName}}\\r\\n                                </h6>\\r\\n                            </div>\\r\\n                            <a href=\\\"http://localhost:3000{{order.orderFile}}\\\">\\r\\n                                <button (click)=\\\"download(order.orderFile)\\\">Download</button>\\r\\n                            </a>\\r\\n                            <form [formGroup]=\\\"reviewForm\\\" (ngSubmit)=\\\"reviewsForm(order.gig_id, order.orderid)\\\">\\r\\n                                <ion-item>\\r\\n                                    <ion-input formControlName=\\\"review\\\" type=\\\"text\\\" placeholder=\\\"Review\\\"></ion-input>\\r\\n                                </ion-item>\\r\\n                                <ion-button [disabled]=\\\"!reviewForm.valid\\\" type=\\\"submit\\\" shape=\\\"round\\\" size=\\\"default\\\"\\r\\n                                            color=\\\"primary\\\"\\r\\n                                            expand=\\\"block\\\">Review\\r\\n                                </ion-button>\\r\\n                            </form>\\r\\n                        </div>\\r\\n\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n            </ion-card-content>\\r\\n        </ion-card>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2ZyZWVsYW5jZS1wcm9maWxlL2ZyZWVsYW5jZS1wcm9maWxlLnBhZ2Uuc2NzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n    selector: 'app-freelance-profile',\n    templateUrl: './freelance-profile.page.html',\n    styleUrls: ['./freelance-profile.page.scss'],\n})\nexport class FreelanceProfilePage implements OnInit {\n    orderRequests: any = undefined;\n    fileToUpload: File = null;\n    pendingOrders: any = undefined;\n    formData: any;\n    comment: any = undefined;\n    myorders: any = undefined;\n    reviewForm: FormGroup;\n    checkArray: any = [];\n    checkArray2: any = [];\n\n    constructor(public formBuilder: FormBuilder, public route: ActivatedRoute, private http: HttpClient, public router: Router) {\n    }\n\n    ngOnInit() {\n    }\n\n    ionViewWillEnter() {\n        this.fetchOrderRequests();\n        this.getPendingOrders();\n        this.fetchMyOrders();\n        this.comment = '';\n        this.reviewForm = this.formBuilder.group({\n            review: ['', Validators.required],\n        });\n    }\n\n\n    accept(id) {\n        this.acceptOrDiscardOrder('accept', id);\n\n    }\n\n    discard(id) {\n        this.acceptOrDiscardOrder('discard', id);\n\n    }\n\n    fetchOrderRequests() {\n        this.http.post('http://localhost:3000/getOrderRequests', {'userid': localStorage.getItem('userid')})\n            .subscribe((data) => {\n                this.checkArray = data;\n                if (this.checkArray.length > 0) {\n                    this.orderRequests = data;\n                }\n\n            });\n    }\n\n    acceptOrDiscardOrder(request, orderid) {\n        this.http.post('http://localhost:3000/acceptOrder', {\n            'userid': localStorage.getItem('userid')\n            , 'orderid': orderid,\n            'requestType': request\n        })\n            .subscribe((data) => {\n                this.fetchOrderRequests();\n\n            });\n    }\n\n    onCancel() {\n        console.log('asdasd');\n    }\n\n    getPendingOrders() {\n        this.http.post('http://localhost:3000/getPendingOrders', {'userid': localStorage.getItem('userid')})\n            .subscribe((data) => {\n                this.checkArray2 = data;\n\n                if (this.checkArray2.length > 0) {\n                 //   console.log(data, 'Pending Orders');\n                    this.pendingOrders = data;\n                }\n            });\n    }\n\n    onComplete(id, orderid, gigid) {\n\n        if (this.fileToUpload) {\n            this.formData.append('userid', id);\n            this.formData.append('myid', localStorage.getItem('userid'));\n            this.formData.append('orderid', orderid);\n            this.formData.append('gigid', gigid);\n            this.http.post('http://localhost:3000/deliverOrder', this.formData)\n                .subscribe((data) => {\n                    console.log(data);\n                    this.getPendingOrders();\n                });\n        }\n\n    }\n\n    handleFileInput(files: FileList) {\n        this.formData = new FormData();\n        this.fileToUpload = files.item(0);\n        this.formData.append('file', this.fileToUpload);\n        console.log(this.fileToUpload);\n    }\n\n    fetchMyOrders() {\n        this.http.post('http://localhost:3000/getMyOrders', {'userid': localStorage.getItem('userid')})\n            .subscribe((data) => {\n                console.log(data);\n                if (data['ordersAccepted'].length > 0) {\n                    this.myorders = data;\n                }\n            });\n    }\n\n    reviewsForm(gigid, orderid) {\n        if (!localStorage.getItem('userid')) {\n            alert('LOGIN REQUIRED');\n            return;\n        }\n        this.http.post('http://localhost:3000/addreview', {\n            order_id: orderid,\n            client_id: localStorage.getItem('userid'),\n            reviews_rating: 4,\n            comment: this.reviewForm.value.review,\n            gigid: gigid\n        })\n            .subscribe((data) => {\n                this.comment = '';\n                if (data['message']) {\n                    alert('Review posted');\n                }\n\n            });\n\n    }\n}\n"],"sourceRoot":""}